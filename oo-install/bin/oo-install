#!/usr/bin/env ruby
#require 'bundler/setup'

require 'optparse'
require 'installer'
require 'installer/assistant'
require 'installer/config'
require 'installer/helpers'
require 'installer/subscription'
require 'installer/workflow'
require 'pathname'

include Installer::Helpers

@context = ENV.has_key?('OO_INSTALL_CONTEXT') ? ENV['OO_INSTALL_CONTEXT'].to_sym : :origin

# Catch a bogus ENV-supplied installer context straight away
if not supported_contexts.include?(@context)
  puts "Installer context '#{@context.to_s}' is not supported. Legal values are: #{supported_contexts.map{ |c| c.to_s }.join(', ')}."
  exit 1
end

options = {
  :workflow_id => nil,
  :config_file => nil,
  :create_config => false,
  :subscription_type => nil,
  :rh_username => nil,
  :rh_password => nil,
  :advanced_mode => false,
  :version => nil,
}


# Parse the command line options
p = OptionParser.new do |opts|
  opts.banner = "Usage: oo-install [args]"
  opts.separator ''
  opts.on('-a', '--advanced-mode', 'Enable access to message server and db server customization.') do |advanced_mode|
    options[:advanced_mode] = advanced_mode
  end
  opts.on('-c', '--config-file FILEPATH', 'The path to an alternate config file') do |filepath|
    options[:config_file] = File.expand_path(filepath)
  end
  opts.on('--create-config', 'Use with "-c" to create and use a new alternate config file') do |create_config|
    options[:create_config] = create_config
  end
  opts.on('-w', '--workflow WORKFLOW_ID', 'The installer workflow for unattended deployment.') do |workflow_id|
    options[:workflow_id] = workflow_id
  end
  opts.on('-e', '--enterprise-mode', 'Show OpenShift Enterprise options (ignored in unattended mode)') do |flag|
    @context = :ose
  end
  opts.on('--openshift-version VERSION', 'Specify the version of OpenShift to be installed (default is latest)') do |version|
    options[:version] = version
  end
  opts.on('-s', '--subscription-type TYPE', "The software source for installation packages.") do |subscription_type|
    options[:subscription_type] = subscription_type
  end
  opts.on('-u', '--username USERNAME', 'Red Hat Login username') do |username|
    options[:rh_username] = username
  end
  opts.on('-p', '--password PASSWORD', 'Red Hat Login password') do |password|
    options[:rh_password] = password
  end
end

begin
  p.parse!(ARGV)
rescue OptionParser::MissingArgument => e
  puts "One of the oo-install arguments is missing a value - #{e.message}"
  puts p
  exit 1
rescue OptionParser::InvalidArgument => e
  puts "The value for one of the oo-install arguments does not match the required format - #{e.message}"
  puts p
  exit 1
rescue OptionParser::InvalidOption => e
  puts "An invalid option was passed to oo-install - #{e.message}"
  puts p
  exit 1
end

# All sanity checking has to happen after the arguments are gathered.
if not options[:workflow_id].nil? and not Installer::Workflow.ids.include?(options[:workflow_id])
  puts "Unknown workflow ID '#{options[:workflow_id]}'. Valid values are:\n\n#{Installer::Workflow.ids.sort.map{ |i| "* #{i}" }.join("\n")}\n\nExiting."
  exit 1
end
if options[:subscription_type].nil? and (not options[:rh_username].nil? or not options[:rh_password].nil?)
  puts "Pass a subscription type to associate with the provided username and/or password."
  exit 1
elsif not options[:subscription_type].nil?
  subscription_types = Installer::Subscription.valid_types_for_context(@context)
  if not subscription_types.include?(options[:subscription_type].to_sym)
    version = @context == :ose ? 'Enterprise' : 'Origin'
    valid_types = subscription_types.map{ |t| t.to_s }.join(", ")
    puts "Subscription type '#{options[:subscription_type]}' not supported for OpenShift #{version}.\nValid values are: #{valid_types}. Exiting."
    exit 1
  end
end
if not options[:version].nil?
  if not options[:workflow_id].nil?
    # Make sure that this version is supported by this workflow
    supported_versions = Installer::Workflow.supported_versions_for_id(options[:workflow_id])
    if not supported_versions.include?(options[:version])
      puts "Requested version #{options[:version]} is not available through workflow '#{options[:workflow_id]}'.\nValid values are: #{supported_versions.keys.sort.join(', ')}. Exiting."
      exit 1
    end
  end
end

# If the config file argument was passed, make sure it is usable.
if not options[:config_file].nil?
  pn = Pathname.new(options[:config_file])
  if pn.exist?()
    if not pn.readable?()
      puts "Config file '#{options[:config_file]}' is not readable. Exiting."
      exit 1
    end
  else
    if not options[:create_config]
      puts "Config file '#{options[:config_file]}' does not exist.\nRerun oo-install with the --create-config flag to create a config file at that location."
      exit 1
    end
    puts "Attempting to create and use new config file at '#{options[:config_file]}'."
  end
end

# Try to instantiate the config object
begin
  config = Installer::Config.new(options[:config_file], @context)
rescue Errno::ENOENT => e
  if not options[:config_file].nil?
    puts "ERROR: The configuration file could not be created at '#{options[:config_file]}'.\nEnsure that the path exists and is writeable."
  else
    puts "ERROR: The default configuration file could not be created at '~/.openshift/oo-install-cfg.yml'.\nEnsure that the home directory is writeable or provide an alternate location."
  end
  exit 1
end
unless config.is_valid?
  puts "Could not process config file at '#{config.file_path}'. Exiting."
  exit 1
end

# Instantiate the cli-provided subscription info in a subscription object
cli_subscription = Installer::Subscription.new(config, @context)
cli_subscription.subscription_type = options[:subscription_type]
cli_subscription.rh_username = options[:rh_username]
cli_subscription.rh_password = options[:rh_password]

# Set up the assistant and get going
begin
  @assistant = Installer::Assistant.new(config, options[:workflow_id], @context, options[:advanced_mode], cli_subscription, options[:version])
rescue Installer::UnrecognizedContextException => e
  puts "\n#{e.message}"
  exit
end
loop do
  begin
    @result = @assistant.run
    if not @result.nil?
      break
    end
  rescue Interrupt => e
    puts "\nExiting oo-install at user request."
    break
  rescue Installer::AssistantRestartException => e
    # Nothing to do; this will just carry us around to the main menu.
  rescue Installer::DeploymentCheckFailedException => e
    puts "\n#{e.message}"
    break
  rescue Installer::AssistantWorkflowCompletedException => e
    puts "\nInstallation completed."
    break
  end
end

exit @result.nil? ? 0 : @result
