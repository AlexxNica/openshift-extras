require 'bundler/gem_tasks'
require 'installer/helpers'

include Installer::Helpers

task :package do
  @tmpdir = ENV['TMPDIR'] || '/tmp/'
  @package_dir = "#{gem_root_dir}/package"
  @portable_dir = @package_dir + "/portable"
  @portable_readme = 'oo_install_launcher.README.txt'
  @site_assets_dir = "#{gem_root_dir}/site_assets"

  # Clear out the old package dir before making the new package
  if Dir.entries(gem_root_dir).include?('package')
    system 'rm', '-rf', @package_dir
  end

  Dir.mkdir(@package_dir)
  Dir.mkdir(@portable_dir)

  # Set up a new package / archive name
  pkgtime = Time.now.getutc.strftime('%Y%m%d-%H%M')

  builds = [
    { :version => nil,
      :wget => nil,
      :context => :origin,
      :base => true,
    },
    { :version => 'ose',
      :wget => nil,
      :context => :ose,
    },
    { :version => 'ose-2.0b',
      :wget => 'https://raw.github.com/openshift/openshift-extras/enterprise-2.0/enterprise/install-scripts/generic/openshift.sh',
      :context => :ose,
    },
    { :version => 'origin',
      :wget => nil,
      :context => :origin,
    },
  ]

  builds.each do |build|
    pkgname = 'oo-install-'
    pkgurl = ''
    pkgdir = @package_dir
    context = build[:context].to_s
    if not build[:version].nil?
      pkgname << build[:version] + '-'
      pkgurl = build[:version] + '\/'
      pkgdir = @package_dir + "/" + build[:version]
      Dir.mkdir(pkgdir)
    end
    pkgname << pkgtime

    # Copy the installer source to $TMPDIR
    system "cp -r #{gem_root_dir} #{@tmpdir}"
    system "mv #{@tmpdir}/oo-install #{@tmpdir}/#{pkgname}"
    openshift_path = "#{@tmpdir}/#{pkgname}/workflows/enterprise_deploy/openshift.sh"

    # If there is a replacement openshift.sh file, get it.
    if not build[:wget].nil?
      system "rm #{openshift_path}"
      system "wget -nv --output-document=#{openshift_path} #{build[:wget]}"
      if not $?.exitstatus == 0
        puts "Failed to get #{build[:wget]}\nExiting."
        exit 1
      end
    end

    # Zip up the source and copy it to the package dir
    system "cd #{@tmpdir} && rm -rf #{pkgname}/package && zip -qq -r #{pkgname}.zip #{pkgname}"
    system 'mv', "#{@tmpdir}#{pkgname}.zip", pkgdir

    # Copy the bootstrap file to the package dir
    system 'cp', 'site_assets/oo-install-bootstrap.sh', "#{pkgdir}/index.html"
    if build.has_key?(:base) and build[:base]
      system 'cp', 'site_assets/site_info.html', pkgdir
      system 'cp', 'vendor/bootstrap/css/bootstrap.min.css', pkgdir
    end
    system "sed -i .bak 's/INSTALLPKGNAME/#{pkgname}/g' #{pkgdir}/index.html"
    system "sed -i .bak 's/INSTALLVERPATH/#{pkgurl}/' #{pkgdir}/index.html"
    system "sed -i .bak 's/INSTALLCONTEXT/#{context}/' #{pkgdir}/index.html"
    system 'rm', "#{pkgdir}/index.html.bak"

    # Lastly, make a "portable" package.
    next if build[:version].nil?

    launcher_name = 'oo-install'
    build_name = 'origin'
    if not build[:version].nil?
      launcher_name << "-#{build[:version]}"
      build_name = build[:version]
    end
    system "cd #{pkgdir} && cp index.html #{@portable_dir}/#{launcher_name} && chmod +x #{@portable_dir}/#{launcher_name}"
    system "cd #{pkgdir} && cp #{pkgname}.zip #{@portable_dir}/#{pkgname}.zip"
    system "cp #{@site_assets_dir}/#{@portable_readme} #{@portable_dir}"
    system "sed -i .bak 's/LAUNCHERNAME/#{launcher_name}/g' #{@portable_dir}/#{@portable_readme}"
    system "rm #{@portable_dir}/#{@portable_readme}.bak"
    system "cd #{@portable_dir} && zip -qq #{launcher_name}.zip #{launcher_name} #{@portable_readme} #{pkgname}.zip"
    system "cd #{@portable_dir} && rm #{launcher_name} #{pkgname}.zip #{@portable_readme}"
  end

  system 'rm', '-rf', "#{@tmpdir}oo-install*"
end
